{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Automating my work life","text":"<p>This repo is a collection of lengthy, repetitive, and ultimately unsatisfying tasks from work I have automated out of my life forever! I enjoy learning about technology that can make my life easier, and sharing it with others to make their lives easier.</p> <p>I chose a lazy person to do a hard job. Because a lazy person will find an easy way to do it.</p> <p>\u2014 Bill Gates</p>"},{"location":"#the-usual","title":"The usual","text":"<p>If my work life was a story, every chapter would start off something like this...</p> <p>I did not realize these things had these properties! I wonder how many of these things exist with this, that, or the other thing? If I give you a list of the things I care about, can you do a \"search\" and give me a list of things that have the properties I am looking for?</p> <p>\u2014 Ends (aka End Users)</p> <p></p>"},{"location":"#requirements","title":"Requirements","text":"<ol> <li> <p>.env file - I am using a local .env file to access sensitive info like API urls</p> </li> <li> <p>Vault - I am using the Vault CLI to access secrets for API calls (example)</p> </li> <li> <p>Google Cloud - I am using the gcloud CLI to authenticate and access bigQuery</p> </li> </ol> <p>gcloud CLI - Authorize with a user account</p> <pre><code>gcloud auth application-default login\n</code></pre>"},{"location":"recent/","title":"Answer Count Report","text":"<p>Problem - How many primary and secondary answers are there in each environment for a list of Question codes (bigQuery.csv)? What metadata is associated with those answers?</p> <p>Solution (Node.js + BigQuery Client):</p> <ol> <li> <p>getAnswerCounts - Get the primary and secondary answer counts from NP and Prod for each Question code, and a list of all the related QGIs.</p> </li> <li> <p>getQgiAnswerCounts - Get the answer counts and other useful metadata from NP and Prod for each QGI.</p> </li> </ol>"},{"location":"recent/#example-usage","title":"Example usage","text":""},{"location":"recent/#answercountreportjs","title":"AnswerCountReport.js","text":"<pre><code>// Read CSV file of Question codes\nconst bQcsvData = fs.readFileSync(\npath.resolve(\"present\", \"bigQuery.csv\"),\n\"utf-8\"\n);\n// Covert to Array\nconst bQcsvArray = CSVToArray(bQcsvData);\n// Get Questions answer count report - getAnswerCounts(bQcsvArray, \"Y\") to export a csv file\nconst results = await getAnswerCounts(bQcsvArray);\nconst QGIs = results.QGIs;\nconsole.log(util.inspect(results, false, null, true));\n// Get QGI answer count report - getQgiAnswerCounts(QGIs, \"Y\") to export a csv file\nconst qgiResults = await getQgiAnswerCounts(QGIs);\nconsole.log(util.inspect(qgiResults, false, null, true));\n</code></pre>"},{"location":"recent/#getanswercounts-results","title":"getAnswerCounts results","text":"<pre><code>{\ncsvData: [\n{\nquestionCode: 'PBCH',\nnp_primary_answer_count: 4,\nnp_secondary_answer_count: 0,\nnp_QGIs: [ 'C2959-I3' ],\nprod_primary_answer_count: 0,\nprod_secondary_answer_count: 0,\nprod_QGIs: []\n},\n{\nquestionCode: 'DRYINDT',\nnp_primary_answer_count: 0,\nnp_secondary_answer_count: 0,\nnp_QGIs: [],\nprod_primary_answer_count: 100,\nprod_secondary_answer_count: 0,\nprod_QGIs: [ 'C3595-I1' ]\n}\n],\nQGIs: [ [ 'C2959-I3' ], [ 'C3595-I1' ] ]\n}\n</code></pre> <p>Example CSV output</p>"},{"location":"recent/#getqgianswercounts-results","title":"getQgiAnswerCounts results","text":"<pre><code>[\n{\nQGI: \"C2959-I3\",\nis_deactivated: \"false\",\nprimary_question: \"PBCH\",\ntaxa: \"Broccoli\",\nnp_answer_count: 4,\nnp_answer_time: \"2022-03-16T04:29:09.119Z\",\nnp_update_time: \"2022-03-16T10:41:46.372Z\",\nprod_answer_count: 0,\nprod_answer_time: \"\",\nprod_update_time: \"\",\n},\n{\nQGI: \"C3595-I1\",\nis_deactivated: \"false\",\nprimary_question: \"DRYINDT\",\ntaxa: \"Corn\",\nnp_answer_count: 0,\nnp_answer_time: \"\",\nnp_update_time: \"\",\nprod_answer_count: 100,\nprod_answer_time: \"2022-03-22T19:08:17.357Z\",\nprod_update_time: \"2022-03-22T20:05:01.180Z\",\n},\n];\n</code></pre> <p>Example CSV output</p>"},{"location":"bigquery/","title":"Getting Started","text":""},{"location":"bigquery/examples/","title":"Examples","text":""},{"location":"bigquery/examples/#answer-count-report","title":"Answer Count Report","text":"<p>Problem - How many primary and secondary answers are there in each environment for a list of Question codes (bigQuery.csv)? What metadata is associated with those answers?</p> <p>Solution (Node.js + BigQuery Client):</p> <ol> <li> <p>getAnswerCounts - Get the primary and secondary answer counts from NP and Prod for each Question code, and a list of all the related QGIs.</p> </li> <li> <p>getQgiAnswerCounts - Get the answer counts and other useful metadata from NP and Prod for each QGI.</p> </li> </ol>"},{"location":"bigquery/examples/#example-getanswercounts-and-getqgianswercounts-usage","title":"Example getAnswerCounts and getQgiAnswerCounts usage","text":""},{"location":"bigquery/examples/#answercountreportjs","title":"AnswerCountReport.js","text":"<pre><code>// Read CSV file of Question codes\nconst bQcsvData = fs.readFileSync(\npath.resolve(\"present\", \"bigQuery.csv\"),\n\"utf-8\"\n);\n// Covert to Array\nconst bQcsvArray = CSVToArray(bQcsvData);\n// Get Questions answer count report - getAnswerCounts(bQcsvArray, \"Y\") to export a csv file\nconst results = await getAnswerCounts(bQcsvArray);\nconst QGIs = results.QGIs;\nconsole.log(util.inspect(results, false, null, true));\n// Get QGI answer count report - getQgiAnswerCounts(QGIs, \"Y\") to export a csv file\nconst qgiResults = await getQgiAnswerCounts(QGIs);\nconsole.log(util.inspect(qgiResults, false, null, true));\n</code></pre>"},{"location":"bigquery/examples/#getanswercounts-results","title":"getAnswerCounts results","text":"<pre><code>{\ncsvData: [\n{\nquestionCode: 'PBCH',\nnp_primary_answer_count: 4,\nnp_secondary_answer_count: 0,\nnp_QGIs: [ 'C2959-I3' ],\nprod_primary_answer_count: 0,\nprod_secondary_answer_count: 0,\nprod_QGIs: []\n},\n{\nquestionCode: 'DRYINDT',\nnp_primary_answer_count: 0,\nnp_secondary_answer_count: 0,\nnp_QGIs: [],\nprod_primary_answer_count: 100,\nprod_secondary_answer_count: 0,\nprod_QGIs: [ 'C3595-I1' ]\n}\n],\nQGIs: [ [ 'C2959-I3' ], [ 'C3595-I1' ] ]\n}\n</code></pre> <p>Example CSV output</p>"},{"location":"bigquery/examples/#getqgianswercounts-results","title":"getQgiAnswerCounts results","text":"<pre><code>[\n{\nQGI: \"C2959-I3\",\nis_deactivated: \"false\",\nprimary_question: \"PBCH\",\ntaxa: \"Broccoli\",\nnp_answer_count: 4,\nnp_answer_time: \"2022-03-16T04:29:09.119Z\",\nnp_update_time: \"2022-03-16T10:41:46.372Z\",\nprod_answer_count: 0,\nprod_answer_time: \"\",\nprod_update_time: \"\",\n},\n{\nQGI: \"C3595-I1\",\nis_deactivated: \"false\",\nprimary_question: \"DRYINDT\",\ntaxa: \"Corn\",\nnp_answer_count: 0,\nnp_answer_time: \"\",\nnp_update_time: \"\",\nprod_answer_count: 100,\nprod_answer_time: \"2022-03-22T19:08:17.357Z\",\nprod_update_time: \"2022-03-22T20:05:01.180Z\",\n},\n];\n</code></pre> <p>Example CSV output</p>"},{"location":"functions/","title":"Getting Started","text":"<p>Don't reinvent the wheel, just realign it.</p> <p>\u2014 Anthony J. D'Angelo</p> <p>Here are three things I end up doing a lot.</p> <ol> <li> <p>Using Node.js to read csv files</p> </li> <li> <p>Using a JSON Web Token and a library like Axios to interact with REST APIs</p> </li> <li> <p>Formatting and exporting JSON based data, usally sourced from a REST API, to csv files</p> </li> </ol>"},{"location":"functions/#the-loop-and-iteration","title":"The Loop and Iteration","text":"<p>I got interested in programming because I hate long, annoying, repetitive tasks. Being able to iterate over a large list of things and let my code find what I am looking for, usally while I am drinking coffee, makes me feel like a super hero.</p>"},{"location":"functions/#meet-my-friend-the-for-loop","title":"Meet my friend the for loop","text":""},{"location":"functions/#example-code","title":"Example code","text":"<pre><code>// A list of things\nconst list = [\n\"Thing 1\",\n\"Thing 2\",\n\"Some special thing\",\n\"Thing 3\",\n\"Thing 4\",\n\"Thing 5\",\n];\n// Loop over the list and find the thing you care about\nfor (let index = 0; index &lt; list.length; index++) {\nconst element = list[index];\nconst special = \"Some special thing\";\nif (element === special) {\nconsole.log(`Alert! Match found for item ${index + 1} (${special}).`);\n} else {\nconsole.log(`No match for item ${index + 1}.`);\n}\n}\n</code></pre>"},{"location":"functions/#output","title":"Output","text":"<pre><code>No match for item 1.\nNo match for item 2.\nAlert! Match found for item 3 (Some special thing).\nNo match for item 4.\nNo match for item 5.\nNo match for item 6.\n</code></pre>"},{"location":"functions/auth/","title":"Oauth2 Tokens","text":"<p>Most of the APIs I am interacting with are secured with OAuth2.</p> <ol> <li> <p>A great place to start - The complete guide to protecting your APIs with OAuth2 (part 1)</p> </li> <li> <p>I love Axios, and this is a great OAuth 2.0 client for Axios - axios-oauth-client</p> </li> </ol> <pre><code>import axios from \"axios\";\nimport oauth from \"axios-oauth-client\";\nconst getClientCredentials = oauth.clientCredentials(\naxios.create(),\n\"https://oauth.com/2.0/token\",\n\"CLIENT_ID\",\n\"CLIENT_SECRET\"\n);\nconst auth = await getClientCredentials(\"OPTIONAL_SCOPES\");\n// =&gt; { \"access_token\": \"...\", \"expires_in\": 900, ... }\n</code></pre>"},{"location":"functions/auth/#example-axios-oauth-client-usage","title":"Example axios-oauth-client usage","text":"<p>Auth.js line 30</p> <pre><code>// Client Credentials grant - https://github.com/compwright/axios-oauth-client#client-credentials-grant\nconst getAuth = oauth.clientCredentials(\naxios.create(),\noauthEndpoint.data[\"aad-oauth-url\"],\nnpVault.data.client_id,\nnpVault.data.secret\n);\nconst getProdAuth = oauth.clientCredentials(\naxios.create(),\noauthEndpoint.data[\"aad-oauth-url\"],\nprodVault.data.client_id,\nprodVault.data.secret\n);\n</code></pre>"},{"location":"functions/csv/","title":"CSV Files","text":""},{"location":"functions/general/","title":"General Stuff","text":""},{"location":"rest/","title":"Getting Started","text":"<p>What is a REST API? - https://restfulapi.net/</p>"},{"location":"rest/#http-request-lingo","title":"HTTP Request Lingo","text":"<p>When you are looking for answers, it helps to ask the right questions. If you want to get information from a REST API then you need to understand HTTP request methods.</p>"},{"location":"rest/#my-work-life-in-json","title":"My work life in JSON","text":"<p>I have to look at it so often now, when people start describing problems to me at work now I catch myself thinking about key value pairs and what things might be objects vs arrays. This is a great resource to uderstand what JSON is and why it is important.</p> <p>A beginner\u2019s guide to JSON, the data format for the internet</p>"},{"location":"rest/examples/","title":"Examples","text":""},{"location":"rest/examples/#question-creation-history-report","title":"Question Creation History Report","text":"<p>Problem - Read from a csv file of Question codes, get the short text and audit history creation date(s) for each code, and then output to a csv file.</p> <p>Solution (Node.js + Axios):</p> <ol> <li>QuestionCreationHistory.js line 50 - Use a GET endpoint to grab the audit history for each Question Code.</li> </ol> <pre><code>const result = await axios.post(\nprocess.env.QUESTIONS + `audit`,\nrequestBody,\n{\nheaders: { Authorization: `Bearer ${authToken.access_token}` },\n}\n);\nresult.data.forEach((element) =&gt; {\nif (element.action === \"CREATED\") {\ntempHistory.push(`Created: ${element.timestamp}`);\n} else {\nif (element.action === \"DELETED\") {\ntempHistory.push(`Deleted: ${element.timestamp}`);\n}\n}\n});\ntempData.History = JSON.stringify(tempHistory);\n</code></pre> <ol> <li>QuestionCreationHistory.js line 79 - Use a GET endpoint to fetch the short text for each Question code.</li> </ol> <pre><code>const shortText = await axios.get(\nprocess.env.QUESTIONS + `question?questionCode=${element[0]}`,\n{\nheaders: { Authorization: `Bearer ${authToken.access_token}` },\n}\n);\ntempData.Short_Text = shortText.data.questions[0].text;\n</code></pre> <p>Example CSV output</p>"}]}
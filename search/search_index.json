{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Automating my work life","text":"<p>I chose a lazy person to do a hard job. Because a lazy person will find an easy way to do it.</p> <p>\u2014 Bill Gates</p>"},{"location":"#the-usual","title":"The Usual","text":"<p>This site contains generic examples of things I have learned about and use at work. If my work life was a story, every chapter would start with something like this...</p> <p>I did not realize these things had these properties! I wonder how many of these things exist with this, that, or the other thing? If I give you a list of the things I care about, can you do a \"search\" and give me a list of things that have the properties I am looking for?</p> <p>\u2014 Ends (aka End Users)</p> <p></p>"},{"location":"#requirements","title":"Requirements","text":"<ol> <li> <p>Vault - I am using the vault CLI to access secrets at work for API calls (vaultOAuthToken.mjs line 15), but this is not required to use the generic GitHub API and Google BigQuery examples.</p> </li> <li> <p>Google Cloud - I am using the gcloud CLI to authenticate and access BigQuery.</p> </li> </ol> <p>gcloud CLI - Authorize with a user account</p> <pre><code>gcloud auth application-default login\n</code></pre>"},{"location":"#tests","title":"Tests","text":"<pre><code>npm run test\n</code></pre> <pre><code> PASS  test/general.test.js\n PASS  test/requirements.test.js\n\nTest Suites: 2 passed, 2 total\nTests:       8 passed, 8 total\nSnapshots:   0 total\nTime:        2.005 s\nRan all test suites.\n</code></pre>"},{"location":"#cli-examples","title":"CLI examples","text":"<pre><code>npm run start\n</code></pre>"},{"location":"devEnv/","title":"My Local Development Environment","text":"<p>Basic setup to get started with the examples in this project.</p>"},{"location":"devEnv/#wsl-vs-code-and-git","title":"WSL, VS Code, and Git","text":"<ol> <li> <p>Installation - https://learn.microsoft.com/en-us/windows/wsl/install</p> </li> <li> <p>Best practices for setup - https://learn.microsoft.com/en-us/windows/wsl/setup/environment</p> </li> <li> <p>Get started with VS Code - https://learn.microsoft.com/en-us/windows/wsl/tutorials/wsl-vscode</p> </li> <li> <p>Get started with Git - https://learn.microsoft.com/en-us/windows/wsl/tutorials/wsl-git</p> </li> </ol>"},{"location":"devEnv/#github-and-git","title":"GitHub and Git","text":"<ol> <li> <p>Setting your username in Git - https://docs.github.com/en/get-started/getting-started-with-git/setting-your-username-in-git</p> </li> <li> <p>Setting your commit email address - https://docs.github.com/en/account-and-profile/setting-up-and-managing-your-personal-account-on-github/managing-email-preferences/setting-your-commit-email-address</p> </li> <li> <p>Generating a new SSH key and adding it to the ssh-agent - https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent</p> </li> <li> <p>Testing your SSH connection - https://docs.github.com/en/authentication/connecting-to-github-with-ssh/testing-your-ssh-connection</p> </li> </ol>"},{"location":"devEnv/#homebrew","title":"Homebrew","text":"<p>The Missing Package Manager for macOS (or Linux) <sup>1</sup></p>"},{"location":"devEnv/#installation","title":"Installation","text":"<pre><code>/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n</code></pre>"},{"location":"devEnv/#nvm","title":"nvm","text":"<p>nvm allows you to quickly install and use different versions of node via the command line. <sup>2</sup></p>"},{"location":"devEnv/#nvm-installation-with-homebrew","title":"nvm installation with Homebrew","text":"<pre><code>brew install nvm\n</code></pre>"},{"location":"devEnv/#nodejs","title":"Node.js","text":"<p>Node.js is an open-source, cross-platform JavaScript runtime environment. <sup>3</sup></p>"},{"location":"devEnv/#pyenv","title":"pyenv","text":"<p>pyenv lets you easily switch between multiple versions of Python. It's simple, unobtrusive, and follows the UNIX tradition of single-purpose tools that do one thing well. <sup>4</sup></p>"},{"location":"devEnv/#pyenv-installation-with-homebrew","title":"pyenv installation with Homebrew","text":"<pre><code>brew install pyenv\n</code></pre>"},{"location":"devEnv/#python","title":"Python","text":"<p>Python is a programming language that lets you work quickly and integrate systems more effectively. <sup>5</sup></p>"},{"location":"devEnv/#mkdocs","title":"MkDocs","text":"<p>MkDocs is a fast, simple and downright gorgeous static site generator that's geared towards building project documentation. Documentation source files are written in Markdown, and configured with a single YAML configuration file. <sup>6</sup></p> <p>I used MkDocs to create this site, and I have used it to create Developer documentation at work.</p>"},{"location":"devEnv/#getting-started-with-mkdocs","title":"Getting started with MkDocs","text":"<ol> <li>Requirements - https://www.mkdocs.org/user-guide/installation/#requirements</li> <li>Installing MkDocs - https://www.mkdocs.org/user-guide/installation/#installing-mkdocs</li> <li>Themes (material) - https://github.com/squidfunk/mkdocs-material#quick-start</li> <li>Formatting options (markdown_extensions) - https://www.mkdocs.org/user-guide/configuration/#formatting-options</li> <li>Run the builtin development server - https://www.mkdocs.org/user-guide/cli/#mkdocs-serve</li> <li>Deployment options - https://www.mkdocs.org/user-guide/deploying-your-docs/</li> </ol> <ol> <li> <p>brew.sh \u21a9</p> </li> <li> <p>https://github.com/nvm-sh \u21a9</p> </li> <li> <p>https://nodejs.org/en \u21a9</p> </li> <li> <p>https://github.com/pyenv \u21a9</p> </li> <li> <p>https://www.python.org/ \u21a9</p> </li> <li> <p>https://www.mkdocs.org/ \u21a9</p> </li> </ol>"},{"location":"bigquery/","title":"Getting Started","text":"<p>BigQuery is a fully managed enterprise data warehouse that helps you manage and analyze your data with built-in features like machine learning, geospatial analysis, and business intelligence. BigQuery's serverless architecture lets you use SQL queries to answer your organization's biggest questions with zero infrastructure management. BigQuery's scalable, distributed analysis engine lets you query terabytes in seconds and petabytes in minutes. <sup>1</sup></p>"},{"location":"bigquery/#bigquery-basics-for-data-analysts","title":"BigQuery Basics for Data Analysts","text":"<p>This has been a great learning resource for me.</p> <p>cloudskillsboost.google</p>"},{"location":"bigquery/#google-bigquery-nodejs-client","title":"Google BigQuery: Node.js Client","text":"<p>The BigQuery Node client lets me create query jobs, wait for the results, and then solve interesting business problems with JavaScript.</p> <p>https://cloud.google.com/nodejs/docs/reference/bigquery/</p>"},{"location":"bigquery/#example-usage","title":"Example usage","text":"<p>isoCountryCodes.mjs line 12</p> <pre><code>const bigquery = new BigQuery();\nconst table = \"`bigquery-public-data.country_codes.country_codes`\";\nconst query = `SELECT country_name as Country, alpha_2_code as Two_Char_Code, alpha_3_code as Three_Char_Code FROM ${table};`;\nconst spinner = createSpinner(\n  `Creating BigQuery job to select all ISO Country Codes from the ${table} table...`\n).start();\nawait sleep();\ntry {\n  let data;\n  const [job] = await bigquery.createQueryJob(query);\n  const [result] = await job.getQueryResults();\n  spinner\n    .success()\n    .info(\n      `ISO Country Codes successfully queried from ${table} table at ${timeStamp()}`\n    );\n  // Create workbook\n  const workbook = utils.book_new();\n  // Worksheet\n  data = [...result];\n  const worksheet = utils.json_to_sheet(data);\n  // Add hyperlinks to worksheet\n  for (let index = 0; index &lt; data.length; index++) {\n    const element = data[index];\n    worksheet[`B${index + 2}`].l = {\n      Target: `https://www.iso.org/obp/ui/#iso:code:3166:${element.Two_Char_Code}`,\n    };\n  }\n  // Append NP worksheet to workbook\n  utils.book_append_sheet(workbook, worksheet, \"ISO Country Codes\");\n  // Export workbook\n  console.log(\n    chalk.green(\n      `Exporting results to ISO_Country_Codes.xlsx at ${timeStamp()}`\n    )\n  );\n  writeFile(workbook, `ISO_Country_Codes_${timeStamp()}.xlsx`);\n} catch (error) {\n  spinner.error();\n  console.log(error);\n}\n</code></pre>"},{"location":"bigquery/#example-output","title":"Example output","text":"<p>ISO_Country_Codes.xlsx</p> <ol> <li> <p>What is BigQuery? - clould.gogle.com \u21a9</p> </li> </ol>"},{"location":"functions/","title":"Getting Started","text":"<p>Don't reinvent the wheel, just realign it.</p> <p>\u2014 Anthony J. D'Angelo</p> <p>Here are three things I end up doing a lot.</p> <ol> <li> <p>Using Node.js to read csv or Excel files</p> </li> <li> <p>Using a JSON Web Token and a library like Axios to interact with REST APIs</p> </li> <li> <p>Formatting and exporting JSON based data to CSV or Excel files</p> </li> </ol>"},{"location":"functions/#the-loop-and-iteration","title":"The Loop and Iteration","text":"<p>I got interested in programming because I hate long, annoying, repetitive tasks. Being able to iterate over a large list of things and let my code find what I am looking for, usally while I am drinking coffee, makes me feel like a super hero.</p>"},{"location":"functions/#meet-my-friend-the-for-loop","title":"Meet my friend the for loop","text":""},{"location":"functions/#example-code","title":"Example code","text":"<pre><code>// A list of things\nconst list = [\n  \"Thing 1\",\n  \"Thing 2\",\n  \"Some special thing\",\n  \"Thing 3\",\n  \"Thing 4\",\n  \"Thing 5\",\n];\n\n// Loop over the list and find the thing you care about\nfor (let index = 0; index &lt; list.length; index++) {\n  const element = list[index];\n  const special = \"Some special thing\";\n\n  if (element === special) {\n    console.log(`Alert! Match found for item ${index + 1} (${special}).`);\n  } else {\n    console.log(`No match for item ${index + 1}.`);\n  }\n}\n</code></pre>"},{"location":"functions/#output","title":"Output","text":"<pre><code>No match for item 1.\nNo match for item 2.\nAlert! Match found for item 3 (Some special thing).\nNo match for item 4.\nNo match for item 5.\nNo match for item 6.\n</code></pre>"},{"location":"functions/auth/","title":"Oauth2 Tokens","text":"<p>Most of the APIs I am interacting with are secured with OAuth2.</p> <ol> <li> <p>A great place to start - The complete guide to protecting your APIs with OAuth2 (part 1)</p> </li> <li> <p>I love Axios, and this is a great OAuth 2.0 client for Axios - axios-oauth-client</p> </li> </ol> <pre><code>import axios from \"axios\";\nimport oauth from \"axios-oauth-client\";\nconst getClientCredentials = oauth.clientCredentials(\n  axios.create(),\n  \"https://oauth.com/2.0/token\",\n  \"CLIENT_ID\",\n  \"CLIENT_SECRET\"\n);\n\nconst auth = await getClientCredentials(\"OPTIONAL_SCOPES\");\n// =&gt; { \"access_token\": \"...\", \"expires_in\": 900, ... }\n</code></pre>"},{"location":"functions/auth/#example-axios-oauth-client-usage","title":"Example axios-oauth-client usage","text":"<p>vaultOAuthToken.mjs line 24</p> <pre><code>// Client Credentials grant - https://github.com/compwright/axios-oauth-client#client-credentials-grant\nconst getAuth = oauth.clientCredentials(\n  axios.create(),\n  url.data[oAuthKey],\n  secrets.data[clientIdKey],\n  secrets.data[secretKey]\n);\nauth = await getAuth(`${secrets.data[clientIdKey]}/.default`);\n</code></pre>"},{"location":"functions/excel/","title":"Excel Files","text":"<p>Excel and CSV files are a big part of my work life, and SheetJS gives me JavaScript Excel super powers!</p>"},{"location":"functions/excel/#example-usage","title":"Example usage","text":"<p>ghRepos.mjs line 25</p> <pre><code>// Create workbook\nconst workbook = utils.book_new();\nconst data = [];\nspinner\n  .success()\n  .info(\n    `GitHub repos successfully fetched for ${ghUserName} at ${timeStamp()}`\n  );\nresult.data.forEach((element) =&gt; {\n  const tempObj = {};\n  tempObj[\"Repo Name\"] = element.name;\n  tempObj[\"Description\"] = element.description;\n  tempObj[\"Homepage\"] = element.homepage;\n  data.push(tempObj);\n});\n// Create worksheet\nconst worksheet = utils.json_to_sheet(data);\n// Add hyperlinks to worksheet\nfor (let index = 0; index &lt; result.data.length; index++) {\n  const element = result.data[index];\n  worksheet[`A${index + 2}`].l = {\n    Target: element.html_url,\n  };\n  worksheet[`C${index + 2}`].l = {\n    Target: element.homepage,\n  };\n}\n// Append NP worksheets to workbook\nutils.book_append_sheet(workbook, worksheet, \"Repos\");\n// Export workbook\nconsole.log(\n  chalk.green(\n    `Exporting results to ${ghUserName}_GitHub_repos.xlsx at ${timeStamp()}`\n  )\n);\nwriteFile(workbook, `${ghUserName}_GitHub_repos_${timeStamp()}.xlsx`);\n</code></pre>"},{"location":"functions/excel/#example-output","title":"Example output","text":"<p>My_GitHub_repos.xlsx</p>"},{"location":"rest/","title":"Getting Started","text":"<p>What is a REST API? - https://restfulapi.net/</p>"},{"location":"rest/#http-request-lingo","title":"HTTP Request Lingo","text":"<p>When you are looking for answers, it helps to ask the right questions. If you want to get information from a REST API then you need to understand HTTP request methods.</p>"},{"location":"rest/#http-requests-in-javascript","title":"HTTP Requests in JavaScript","text":"<p>I made my first API request with Fetch from a browser. Since then I have been learning more about Node and using Axios to interact with REST APIs.</p>"},{"location":"rest/#example-usage-github-rest-api","title":"Example Usage (GitHub REST API)","text":"<pre><code>const projectNames = [];\n\ntry {\n  console.log(\"Fetching GitHub projects...\");\n  const result = await axios.get(process.env.API_URL);\n  result.data.forEach((element) =&gt; {\n    projectNames.push(element.name);\n  });\n  console.log(`My GitHub project names:\\n${projectNames.join(\", \")}`);\n} catch (error) {\n  console.log(error);\n}\n</code></pre>"},{"location":"rest/#example-output","title":"Example output","text":"<pre><code>Fetching GitHub projects...\nMy GitHub project names:\ngithub-react-portfolio-template, mshuber1981, Portfolio, react-contact-form, vite-starter, work-life\n</code></pre>"},{"location":"rest/#my-work-life-in-json","title":"My work life in JSON","text":"<p>I have to look at it so often now, when people start describing problems to me at work now I catch myself thinking about key-value pairs and what things might be objects vs arrays. This is a great resource to understand what JSON is and why it is important.</p> <p>A beginner\u2019s guide to JSON, the data format for the internet</p>"}]}
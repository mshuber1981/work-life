{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Automating my work life","text":"<p>This repo is a collection of lengthy, repetitive, and ultimately unsatisfying tasks from work I have automated out of my life forever! I enjoy learning about technology that can make my life easier, and sharing it with others to make their lives easier.</p> <p>I chose a lazy person to do a hard job. Because a lazy person will find an easy way to do it.</p> <p>\u2014 Bill Gates</p>"},{"location":"#the-usual","title":"The usual","text":"<p>If my work life was a story, every chapter would start off something like this...</p> <p>I did not realize these things had these properties! I wonder how many of these things exist with this, that, or the other thing? If I give you a list of the things I care about, can you do a \"search\" and give me a list of things that have the properties I am looking for?</p> <p>\u2014 Ends (aka End Users)</p> <p></p>"},{"location":"#requirements","title":"Requirements","text":"<ol> <li> <p>.env file - I am using a local .env file to access sensitive info like API urls</p> </li> <li> <p>Vault - I am using the Vault CLI to access secrets for API calls (example)</p> </li> <li> <p>Google Cloud - I am using the gcloud CLI to authenticate and access BigQuery</p> </li> </ol> <p>gcloud CLI - Authorize with a user account</p> <pre><code>gcloud auth application-default login\n</code></pre>"},{"location":"devEnv/","title":"My Local Development Environment","text":"<p>I have been using and supporting Windows for over a decade, so it is the operating system I am most comfortable with. I have used a Mac in the past, and most of the Developers I have interacted with over the years seem to prefere it. In my current role I have to use Windows, but all of the Developers use a Mac. The Mac operating system is Unix based, so having acceess to a Linux based terminal is a great substitute. Windows Subsystem for Linux (WSL) is currently my preferred development environment.</p>"},{"location":"devEnv/#wsl-vs-code-and-git","title":"WSL, VS Code, and Git","text":"<ol> <li> <p>Installation - https://learn.microsoft.com/en-us/windows/wsl/install</p> </li> <li> <p>Best practices for setup - https://learn.microsoft.com/en-us/windows/wsl/setup/environment</p> </li> <li> <p>Get started with VS Code - https://learn.microsoft.com/en-us/windows/wsl/tutorials/wsl-vscode</p> </li> <li> <p>Get started with Git - https://learn.microsoft.com/en-us/windows/wsl/tutorials/wsl-git</p> </li> </ol>"},{"location":"devEnv/#github-and-git","title":"GitHub and Git","text":"<ol> <li> <p>Setting your username in Git - https://docs.github.com/en/get-started/getting-started-with-git/setting-your-username-in-git</p> </li> <li> <p>Setting your commit email address - https://docs.github.com/en/account-and-profile/setting-up-and-managing-your-personal-account-on-github/managing-email-preferences/setting-your-commit-email-address</p> </li> <li> <p>Generating a new SSH key and adding it to the ssh-agent - https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent</p> </li> <li> <p>Testing your SSH connection - https://docs.github.com/en/authentication/connecting-to-github-with-ssh/testing-your-ssh-connection</p> </li> </ol>"},{"location":"devEnv/#homebrew","title":"Homebrew","text":"<p>The Missing Package Manager for macOS (or Linux) 1</p>"},{"location":"devEnv/#installation","title":"Installation","text":"<pre><code>/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n</code></pre>"},{"location":"devEnv/#nvm","title":"nvm","text":"<p>nvm allows you to quickly install and use different versions of node via the command line. 2</p>"},{"location":"devEnv/#installation-with-homebrew","title":"Installation with Homebrew","text":"<pre><code>brew install nvm\n</code></pre>"},{"location":"devEnv/#nodejs-on-windows","title":"Node.js on Windows","text":"<p>Node.js is an open-source, cross-platform JavaScript runtime environment. 3</p> <p>Get started with Node.js on WSL - https://learn.microsoft.com/en-us/windows/dev-environment/javascript/nodejs-overview</p> <ol> <li> <p>brew.sh \u21a9</p> </li> <li> <p>https://github.com/nvm-sh/nvm#intro \u21a9</p> </li> <li> <p>https://nodejs.org/en \u21a9</p> </li> </ol>"},{"location":"recent/","title":"Answer Count Report","text":"<p>Problem - How many primary and secondary answers are there in each environment for a list of Question codes (bigQuery.csv)? What metadata is associated with those answers?</p> <p>Solution (Node.js + BigQuery Client):</p> <ol> <li> <p>getAnswerCounts - Get the primary and secondary answer counts from NP and Prod for each Question code, and a list of all the related QGIs.</p> </li> <li> <p>getQgiAnswerCounts - Get the answer counts and other useful metadata from NP and Prod for each QGI.</p> </li> </ol>"},{"location":"recent/#example-usage","title":"Example usage","text":""},{"location":"recent/#answercountreportjs","title":"AnswerCountReport.js","text":"<pre><code>// Read CSV file of Question codes\nconst bQcsvData = fs.readFileSync(\npath.resolve(\"present\", \"bigQuery.csv\"),\n\"utf-8\"\n);\n// Covert to Array\nconst bQcsvArray = CSVToArray(bQcsvData);\n// Get Questions answer count report - getAnswerCounts(bQcsvArray, \"Y\") to export a csv file\nconst results = await getAnswerCounts(bQcsvArray);\nconst QGIs = results.QGIs;\nconsole.log(util.inspect(results, false, null, true));\n// Get QGI answer count report - getQgiAnswerCounts(QGIs, \"Y\") to export a csv file\nconst qgiResults = await getQgiAnswerCounts(QGIs);\nconsole.log(util.inspect(qgiResults, false, null, true));\n</code></pre>"},{"location":"recent/#getanswercounts-results","title":"getAnswerCounts results","text":"<pre><code>{\ncsvData: [\n{\nquestionCode: 'PBCH',\nnp_primary_answer_count: 4,\nnp_secondary_answer_count: 0,\nnp_QGIs: [ 'C2959-I3' ],\nprod_primary_answer_count: 0,\nprod_secondary_answer_count: 0,\nprod_QGIs: []\n},\n{\nquestionCode: 'DRYINDT',\nnp_primary_answer_count: 0,\nnp_secondary_answer_count: 0,\nnp_QGIs: [],\nprod_primary_answer_count: 100,\nprod_secondary_answer_count: 0,\nprod_QGIs: [ 'C3595-I1' ]\n}\n],\nQGIs: [ [ 'C2959-I3' ], [ 'C3595-I1' ] ]\n}\n</code></pre> <p>Example CSV output</p>"},{"location":"recent/#getqgianswercounts-results","title":"getQgiAnswerCounts results","text":"<pre><code>[\n{\nQGI: \"C2959-I3\",\nis_deactivated: \"false\",\nprimary_question: \"PBCH\",\ntaxa: \"Broccoli\",\nnp_answer_count: 4,\nnp_answer_time: \"2022-03-16T04:29:09.119Z\",\nnp_update_time: \"2022-03-16T10:41:46.372Z\",\nprod_answer_count: 0,\nprod_answer_time: \"\",\nprod_update_time: \"\",\n},\n{\nQGI: \"C3595-I1\",\nis_deactivated: \"false\",\nprimary_question: \"DRYINDT\",\ntaxa: \"Corn\",\nnp_answer_count: 0,\nnp_answer_time: \"\",\nnp_update_time: \"\",\nprod_answer_count: 100,\nprod_answer_time: \"2022-03-22T19:08:17.357Z\",\nprod_update_time: \"2022-03-22T20:05:01.180Z\",\n},\n];\n</code></pre> <p>Example CSV output</p>"},{"location":"bigquery/","title":"BigQuery - Getting Started","text":"<p>BigQuery is a fully managed enterprise data warehouse that helps you manage and analyze your data with built-in features like machine learning, geospatial analysis, and business intelligence. BigQuery's serverless architecture lets you use SQL queries to answer your organization's biggest questions with zero infrastructure management. BigQuery's scalable, distributed analysis engine lets you query terabytes in seconds and petabytes in minutes. 1</p>"},{"location":"bigquery/#bigquery-basics-for-data-analysts-cloudskillsboostgoogle","title":"BigQuery Basics for Data Analysts - cloudskillsboost.google","text":"<p>This has been a great learning resource for me.</p>"},{"location":"bigquery/#google-bigquery-nodejs-client-httpscloudgooglecomnodejsdocsreferencebigquerylatest","title":"Google BigQuery: Node.js Client - https://cloud.google.com/nodejs/docs/reference/bigquery/latest","text":"<p>The BigQuery Node client lets me create query jobs, wait for the results, and solve interesting problems with JavaScript.</p> <ol> <li> <p>What is BigQuery? - clould.gogle.com \u21a9</p> </li> </ol>"},{"location":"bigquery/examples/","title":"Examples","text":""},{"location":"bigquery/examples/#answer-count-report","title":"Answer Count Report","text":"<p>Problem - How many primary and secondary answers are there in each environment for a list of Question codes (bigQuery.csv)? What metadata is associated with those answers?</p> <p>Solution (Node.js + BigQuery Client):</p> <ol> <li> <p>getAnswerCounts - Get the primary and secondary answer counts from NP and Prod for each Question code, and a list of all the related QGIs.</p> </li> <li> <p>getQgiAnswerCounts - Get the answer counts and other useful metadata from NP and Prod for each QGI.</p> </li> </ol>"},{"location":"bigquery/examples/#example-getanswercounts-and-getqgianswercounts-usage","title":"Example getAnswerCounts and getQgiAnswerCounts usage","text":""},{"location":"bigquery/examples/#answercountreportjs","title":"AnswerCountReport.js","text":"<pre><code>// Read CSV file of Question codes\nconst bQcsvData = fs.readFileSync(\npath.resolve(\"present\", \"bigQuery.csv\"),\n\"utf-8\"\n);\n// Covert to Array\nconst bQcsvArray = CSVToArray(bQcsvData);\n// Get Questions answer count report - getAnswerCounts(bQcsvArray, \"Y\") to export a csv file\nconst results = await getAnswerCounts(bQcsvArray);\nconst QGIs = results.QGIs;\nconsole.log(util.inspect(results, false, null, true));\n// Get QGI answer count report - getQgiAnswerCounts(QGIs, \"Y\") to export a csv file\nconst qgiResults = await getQgiAnswerCounts(QGIs);\nconsole.log(util.inspect(qgiResults, false, null, true));\n</code></pre>"},{"location":"bigquery/examples/#getanswercounts-results","title":"getAnswerCounts results","text":"<pre><code>{\ncsvData: [\n{\nquestionCode: 'PBCH',\nnp_primary_answer_count: 4,\nnp_secondary_answer_count: 0,\nnp_QGIs: [ 'C2959-I3' ],\nprod_primary_answer_count: 0,\nprod_secondary_answer_count: 0,\nprod_QGIs: []\n},\n{\nquestionCode: 'DRYINDT',\nnp_primary_answer_count: 0,\nnp_secondary_answer_count: 0,\nnp_QGIs: [],\nprod_primary_answer_count: 100,\nprod_secondary_answer_count: 0,\nprod_QGIs: [ 'C3595-I1' ]\n}\n],\nQGIs: [ [ 'C2959-I3' ], [ 'C3595-I1' ] ]\n}\n</code></pre> <p>Example CSV output</p>"},{"location":"bigquery/examples/#getqgianswercounts-results","title":"getQgiAnswerCounts results","text":"<pre><code>[\n{\nQGI: \"C2959-I3\",\nis_deactivated: \"false\",\nprimary_question: \"PBCH\",\ntaxa: \"Broccoli\",\nnp_answer_count: 4,\nnp_answer_time: \"2022-03-16T04:29:09.119Z\",\nnp_update_time: \"2022-03-16T10:41:46.372Z\",\nprod_answer_count: 0,\nprod_answer_time: \"\",\nprod_update_time: \"\",\n},\n{\nQGI: \"C3595-I1\",\nis_deactivated: \"false\",\nprimary_question: \"DRYINDT\",\ntaxa: \"Corn\",\nnp_answer_count: 0,\nnp_answer_time: \"\",\nnp_update_time: \"\",\nprod_answer_count: 100,\nprod_answer_time: \"2022-03-22T19:08:17.357Z\",\nprod_update_time: \"2022-03-22T20:05:01.180Z\",\n},\n];\n</code></pre> <p>Example CSV output</p>"},{"location":"functions/","title":"Functions - Getting Started","text":"<p>Don't reinvent the wheel, just realign it.</p> <p>\u2014 Anthony J. D'Angelo</p> <p>Here are three things I end up doing a lot.</p> <ol> <li> <p>Using Node.js to read csv files</p> </li> <li> <p>Using a JSON Web Token and a library like Axios to interact with REST APIs</p> </li> <li> <p>Formatting and exporting JSON based data, usally sourced from a REST API, to csv files</p> </li> </ol>"},{"location":"functions/#the-loop-and-iteration","title":"The Loop and Iteration","text":"<p>I got interested in programming because I hate long, annoying, repetitive tasks. Being able to iterate over a large list of things and let my code find what I am looking for, usally while I am drinking coffee, makes me feel like a super hero.</p>"},{"location":"functions/#meet-my-friend-the-for-loop","title":"Meet my friend the for loop","text":""},{"location":"functions/#example-code","title":"Example code","text":"<pre><code>// A list of things\nconst list = [\n\"Thing 1\",\n\"Thing 2\",\n\"Some special thing\",\n\"Thing 3\",\n\"Thing 4\",\n\"Thing 5\",\n];\n// Loop over the list and find the thing you care about\nfor (let index = 0; index &lt; list.length; index++) {\nconst element = list[index];\nconst special = \"Some special thing\";\nif (element === special) {\nconsole.log(`Alert! Match found for item ${index + 1} (${special}).`);\n} else {\nconsole.log(`No match for item ${index + 1}.`);\n}\n}\n</code></pre>"},{"location":"functions/#output","title":"Output","text":"<pre><code>No match for item 1.\nNo match for item 2.\nAlert! Match found for item 3 (Some special thing).\nNo match for item 4.\nNo match for item 5.\nNo match for item 6.\n</code></pre>"},{"location":"functions/auth/","title":"Oauth2 Tokens","text":"<p>Most of the APIs I am interacting with are secured with OAuth2.</p> <ol> <li> <p>A great place to start - The complete guide to protecting your APIs with OAuth2 (part 1)</p> </li> <li> <p>I love Axios, and this is a great OAuth 2.0 client for Axios - axios-oauth-client</p> </li> </ol> <pre><code>import axios from \"axios\";\nimport oauth from \"axios-oauth-client\";\nconst getClientCredentials = oauth.clientCredentials(\naxios.create(),\n\"https://oauth.com/2.0/token\",\n\"CLIENT_ID\",\n\"CLIENT_SECRET\"\n);\nconst auth = await getClientCredentials(\"OPTIONAL_SCOPES\");\n// =&gt; { \"access_token\": \"...\", \"expires_in\": 900, ... }\n</code></pre>"},{"location":"functions/auth/#example-axios-oauth-client-usage","title":"Example axios-oauth-client usage","text":"<p>Auth.js line 30</p> <pre><code>// Client Credentials grant - https://github.com/compwright/axios-oauth-client#client-credentials-grant\nconst getAuth = oauth.clientCredentials(\naxios.create(),\noauthEndpoint.data[\"aad-oauth-url\"],\nnpVault.data.client_id,\nnpVault.data.secret\n);\nconst getProdAuth = oauth.clientCredentials(\naxios.create(),\noauthEndpoint.data[\"aad-oauth-url\"],\nprodVault.data.client_id,\nprodVault.data.secret\n);\n</code></pre>"},{"location":"functions/csv/","title":"Comma Separated Values","text":"<p>CSV files are a big part of my work life.</p> <p>\"They aid with moving information from one application to another. Tabular spreadsheet data from one program is converted into a CSV file, which is then used to import the information into another program.\" 1</p> <ol> <li> <p>Learning to read files with Node.js - https://nodejs.dev/en/learn/reading-files-with-nodejs/</p> </li> <li> <p>Converting CSV file read data to an array - CSVToArray (CSV.js line 18)</p> </li> </ol>"},{"location":"functions/csv/#example-usage","title":"Example usage","text":"<p>Example CSV file (test.csv)</p> <p>index.js line 6</p> <pre><code>// Set CSV file name\nconst csvFileName = \"test\";\nlet csvArray;\ntry {\n// Read CSV file\nconsole.log(`Reading ${csvFileName}.csv`);\nconst csvData = fs.readFileSync(`./${csvFileName}.csv`, \"utf-8\");\n// Covert to Array\ncsvArray = CSVToArray(csvData, \",\", true);\nconsole.log(`Converting ${csvFileName}.csv to an array:`);\nconsole.log(csvArray);\n} catch (error) {\nconsole.log(`${error.message} (check csvFilename - line 6)`);\n}\n</code></pre>"},{"location":"functions/csv/#example-output","title":"Example output","text":"<pre><code>Reading test.csv\nConverting test.csv to an array:\n[ [ 'PATHOGEN', 'SCINAME' ], [ 'PHT', 'CM' ], [ 'test', 'test' ] ]\n</code></pre> <ol> <li> <p>What is a CSV File - parse.ly \u21a9</p> </li> </ol>"},{"location":"functions/general/","title":"General Stuff","text":""},{"location":"functions/general/#required-function-parameters","title":"Required Function Parameters","text":"<p>One way to deal with required function parameters in JavaScript - CSS-tricks.com Code Snippets</p> <p>isRequired (General.js line 4)</p>"},{"location":"functions/general/#example-isrequired-usage","title":"Example isRequired usage","text":"<pre><code>const logName = (name = isRequired(\"Name\")) =&gt; console.log(name);\nlogName();\n</code></pre>"},{"location":"functions/general/#example-isrequired-output","title":"Example isRequired output","text":"<pre><code>file:///home/mike/GitHub/personal/work-life/present/functions/General.js:6\n  throw new Error(`${param} is required!`);\n^\n\nError: Name is required!\n</code></pre>"},{"location":"functions/general/#terminal-commands-with-nodejs","title":"Terminal commands with Node.js","text":"<p>I needed a way to run a terminal command in Node and wait for the results. This lead me to Node's Child process.</p> <p>execPromise (General.js line 9)</p>"},{"location":"functions/general/#example-execpromise-usage","title":"Example execPromise usage","text":"<pre><code>const whoAmI = (command) =&gt;\nexecPromise(command).then((response) =&gt; console.log(response));\nwhoAmI(\"whoami\");\n</code></pre>"},{"location":"functions/general/#example-execpromise-output","title":"Example execPromise output","text":"<pre><code>mike\n</code></pre>"},{"location":"rest/","title":"REST APIs - Getting Started","text":"<p>What is a REST API? - https://restfulapi.net/</p>"},{"location":"rest/#http-request-lingo","title":"HTTP Request Lingo","text":"<p>When you are looking for answers, it helps to ask the right questions. If you want to get information from a REST API then you need to understand HTTP request methods.</p>"},{"location":"rest/#http-requests-in-javascript","title":"HTTP Requests in JavaScript","text":"<p>I made my first API request with Fetch from a broswer. Since then I have been learning more about Node and using Axios to interact with REST APIs.</p>"},{"location":"rest/#my-work-life-in-json","title":"My work life in JSON","text":"<p>I have to look at it so often now, when people start describing problems to me at work now I catch myself thinking about key value pairs and what things might be objects vs arrays. This is a great resource to uderstand what JSON is and why it is important.</p> <p>A beginner\u2019s guide to JSON, the data format for the internet</p>"},{"location":"rest/examples/","title":"Examples","text":""},{"location":"rest/examples/#question-creation-history-report","title":"Question Creation History Report","text":"<p>Problem - Read from a csv file of Question codes, get the short text and audit history creation date(s) for each code, and then output to a csv file.</p> <p>Solution (Node.js + Axios):</p> <ol> <li> <p>QuestionCreationHistory.js line 50 - Use a GET endpoint to grab the audit history for each Question Code.</p> </li> <li> <p>QuestionCreationHistory.js line 79 - Use a GET endpoint to fetch the short text for each Question code.</p> </li> </ol>"},{"location":"rest/examples/#get-audit-history-example","title":"Get audit history example","text":"<pre><code>const result = await axios.post(process.env.QUESTIONS + `audit`, requestBody, {\nheaders: { Authorization: `Bearer ${authToken.access_token}` },\n});\nresult.data.forEach((element) =&gt; {\nif (element.action === \"CREATED\") {\ntempHistory.push(`Created: ${element.timestamp}`);\n} else {\nif (element.action === \"DELETED\") {\ntempHistory.push(`Deleted: ${element.timestamp}`);\n}\n}\n});\ntempData.History = JSON.stringify(tempHistory);\n</code></pre>"},{"location":"rest/examples/#get-short-text-example","title":"Get short text example","text":"<pre><code>const shortText = await axios.get(\nprocess.env.QUESTIONS + `question?questionCode=${element[0]}`,\n{\nheaders: { Authorization: `Bearer ${authToken.access_token}` },\n}\n);\ntempData.Short_Text = shortText.data.questions[0].text;\n</code></pre>"},{"location":"rest/examples/#example-csv-output","title":"Example CSV output","text":""}]}